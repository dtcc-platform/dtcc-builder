#!/usr/bin/env python3
# dtcc-plot
# // Copyright (C) 2020 Anders Logg, Anton J Olsson
# // Licensed under the MIT License

import sys, numpy, json, pylab, matplotlib, matplotlib.cm as cmx


def PlotShapes(colorBy, plotLabels=False, plotVertices=False):  # Plot CityModel or RoadNetwork
    # Get data
    shapes = GetShapes(colorBy)

    # Iterate over buildings or road edges
    for i, shape in enumerate(shapes):

        # Get footprint/edge
        edges = shape['Footprint'] if 'Footprint' in shape else shape['Edge']
        x = numpy.array([float(xy['x']) for xy in edges])
        y = numpy.array([float(xy['y']) for xy in edges])

        # Skip if empty
        if len(edges) == 0:
            continue

        # Compute center
        xm = numpy.mean(x)
        ym = numpy.mean(y)

        # Set color if plotting RoadNetwork and edges have some attribute
        color = matplotlib.colors.to_hex(shape['Color']) if dataType == 'RoadNetwork' and shape['Color'] \
            else None

        if plotVertices:
            pylab.plot(x, y, '.-', color=color)
            # If shape is polygon/building, enclose with black dotted line
            if dataType == 'CityModel':
                pylab.plot([x[0], x[-1]], [y[0], y[-1]], 'k--')
        else:
            # Only enclose shape if polygon/building
            if dataType == 'RoadNetwork':
                xx = x
                yy = y
            else:
                xx = numpy.append(x, x[0])
                yy = numpy.append(y, y[0])
            pylab.plot(xx, yy, '-', color=color)

        # pylab.plot(x[0], y[0], 'kx')
        if plotLabels:
            pylab.text(xm, ym, str(i), fontsize=10, ha='center', va='center')
            # Vertex labeling mostly useful for buildings
            if dataType == 'CityModel':
                for j, (xx, yy) in enumerate(zip(x, y)):
                    pylab.text(xx, yy, str(j), fontsize=8, ha='left', va='bottom')

    # pylab.grid(True)
    pylab.axis('equal')
    pylab.axis('off')


def GetShapes(colorBy):  # Get buildings or RoadNetwork
    # Only color code RoadNetwork data
    if dataType == 'CityModel':
        return data['Buildings']

    # Init data structures
    shapes = []
    roadColors = {}
    net = data['RoadNetwork']

    # Color scheme
    colormap = cmx.tab20.colors

    allAttributes = {**net['EdgeValues'], **net['EdgeProperties']}
    if colorBy != 'random' and colorBy not in allAttributes:
        print('dtcc-plot: %s not in EdgeProperties nor EdgeValues' % colorBy)
        colorBy = 'random'
    if len(allAttributes) == 0:
        print('dtcc-plot: Random edge coloring')
    else:
        if colorBy == 'random':
            # Pick first available edge attribute to color by
            colorBy = next(attr for attr in allAttributes)
        print('dtcc-plot: Coloring by %s' % colorBy)

    for i, e in enumerate(net['Edges']):
        # Use same vertex format as for Buildings
        v1 = {'x': net['Vertices'][e[0] * 2], 'y': net['Vertices'][e[0] * 2 + 1]}
        v2 = {'x': net['Vertices'][e[1] * 2], 'y': net['Vertices'][e[1] * 2 + 1]}

        # Get edge's color
        if colorBy == 'random':
            color = None
        else:
            value = allAttributes[colorBy][i]
            color = roadColors.get(value)
            if color is None and colorBy:
                MapColorToAttribute(colormap, value, roadColors)
                color = roadColors[value]
        shapes.append({'Edge': [v1, v2], 'Color': color})

    return shapes


def MapColorToAttribute(colormap, roadCode, roadColors):
    numColors = len(roadColors)
    # Prefer color scheme's ('tab20') darker nuances
    index = (numColors * 2 + (numColors // 20)) % 20
    roadColors[roadCode] = colormap[index]


def PlotGridField2D(data, plotContours=False):
    # Get data
    values = data['Values']
    xMin = data['Grid']['BoundingBox']['P']['x']
    yMin = data['Grid']['BoundingBox']['P']['y']
    xMax = data['Grid']['BoundingBox']['Q']['x']
    yMax = data['Grid']['BoundingBox']['Q']['y']
    xSize = data['Grid']['XSize']
    ySize = data['Grid']['YSize']

    # Test data for verifying orientation, bump in lower left corner
    # for i in range(len(gridData)):
    #     x = i % xSize
    #     y = i // ySize;
    #     x = float(x) / (xSize - 1)
    #     y = float(y) / (ySize - 1)
    #     values[i] = x*(1 - x)**2*y*(1 - y)**2

    # Reshape to 2D grid
    z = numpy.reshape(values, (xSize, ySize))

    # Select plot
    if plotContours:
        pylab.contour(z, extent=[xMin, xMax, yMin, yMax])
        pylab.axis('scaled')
        pylab.axis('off')
    else:
        pylab.imshow(z, extent=[xMin, xMax, yMin, yMax],
                     origin='lower',
                     cmap='terrain')
        pylab.axis('off')

    # Set title
    pylab.title('[%g, %g] x [%g, %g]' % \
                (xMin, xMax, yMin, yMax))
    pylab.show()


def PlotMesh2D(data):
    # Get data
    v = data['Vertices']
    f = data['Cells']
    c = data['Markers']
    x = [v[2 * i] for i in range(len(v) // 2)]
    y = [v[2 * i + 1] for i in range(len(v) // 2)]
    t = [(f[3 * i], f[3 * i + 1], f[3 * i + 2]) for i in range(len(f) // 3)]

    # Create plot
    pylab.tripcolor(x, y, t, c, edgecolors='white')
    pylab.show()


def Help():
    print('Usage: dtcc-plot [--plot-labels] [--plot-vertices] [--plot-contours] [--color-by=attribute] Data.json ')


def GetColorCoding():
    # Get coloring attribute if passed and dataType = 'RoadNetwork', else return random
    if dataType != 'RoadNetwork':
        return 'random'
    c = next((arg for arg in sys.argv if arg.startswith('--color-by=')), 'random')
    return c.removeprefix('--color-by=')


if __name__ == "__main__":

    # Check command-line arguments
    if len(sys.argv) < 2:
        Help()
        sys.exit(1)

    # Load JSON data
    fileName = sys.argv[-1]
    with open(fileName) as f:
        data = json.load(f)

    # Check type and plot
    dataType = data['Type']
    if dataType == 'CityModel' or dataType == 'RoadNetwork':
        coloring = GetColorCoding()
        PlotShapes(coloring, '--plot-labels' in sys.argv, '--plot-vertices' in sys.argv)
        pylab.show()
    elif dataType == 'GridField2D':
        PlotGridField2D(data, '--plot-contours' in sys.argv)
    elif dataType == 'Mesh2D':
        PlotMesh2D(data)
    else:
        print('Unknown data type: ' + str(dataType))
