#!/usr/bin/env python3
#
# VirtualCity@Chalmers: vc-generate-citymodel
# Anders Logg 2019

import sys, numpy, json, pylab

def PlotCityModel(data, plotLabels=False, plotVertices=False):

    # Get data
    buildings = data['Buildings']

    # Iterate over buildings
    for i, building in enumerate(buildings):

        # Get footprint
        footprint = building['Footprint']
        x = numpy.array([float(xy['x']) for xy in footprint])
        y = numpy.array([float(xy['y']) for xy in footprint])

        # Skip if empty
        if len(footprint) == 0:
            continue

        # Compute center
        xm = numpy.mean(x)
        ym = numpy.mean(y)

        # Plot
        if plotVertices:
            pylab.plot(x, y, '.-')
            pylab.plot([x[0], x[-1]], [y[0], y[-1]], 'k--')
        else:
            xx = numpy.append(x, x[0])
            yy = numpy.append(y, y[0])
            pylab.plot(xx, yy, '-')

        #pylab.plot(x[0], y[0], 'kx')
        if plotLabels:
            pylab.text(xm, ym, str(i), fontsize=10, ha='center', va='center')
            for j, (xx, yy) in enumerate(zip(x, y)):
                pylab.text(xx, yy, str(j), fontsize=8, ha='left', va='bottom')

    #pylab.grid(True)
    pylab.axis('equal')
    pylab.axis('off')
    #pylab.show()

def PlotHeightMap(data, plotContours=False):

    # Get data
    gridData = data['GridData']
    xMin = data['XMin']
    yMin = data['YMin']
    xMax = data['XMax']
    yMax = data['YMax']
    xSize = data['XSize']
    ySize = data['YSize']

    # Test data for verifying orientation, bump in lower left corner
    # for i in range(len(gridData)):
    #     x = i % xSize
    #     y = i // ySize;
    #     x = float(x) / (xSize - 1)
    #     y = float(y) / (ySize - 1)
    #     gridData[i] = x*(1 - x)**2*y*(1 - y)**2

    # Reshape to 2D grid
    z = numpy.reshape(gridData, (xSize, ySize))

    # Select plot
    if plotContours:
        pylab.contour(z, extent=[xMin, xMax, yMin, yMax])
        pylab.axis('scaled')
        pylab.axis('off')
    else:
        pylab.imshow(z, extent=[xMin, xMax, yMin, yMax],
                        origin='lower',
                        cmap='terrain')
        pylab.axis('off')

    # Set title
    pylab.title('[%g, %g] x [%g, %g]' % \
                (xMin, xMax, yMin, yMax))
    pylab.show()

def PlotMesh2D(data):

    # Get data
    v = data['Vertices']
    f = data['Cells']
    c = data['DomainMarkers']
    x = [v[2*i] for i in range(len(v) // 2)]
    y = [v[2*i+1] for i in range(len(v) // 2)]
    t = [(f[3*i], f[3*i+1], f[3*i+2]) for i in range(len(f) // 3)]

    # Create plot
    pylab.tripcolor(x, y, t, c, edgecolors='white')
    pylab.show()

def Help():
    print('Usage: vc-plot [--plot-labels] [--plot-vertices] [--plot-contors] Data.json')

if __name__ == "__main__":

    # Check command-line arguments
    if len(sys.argv) < 2:
        Help()
        sys.exit(1)

    # Load JSON data
    fileName = sys.argv[-1]
    with open(fileName) as f:
        data = json.load(f)

    # Check type and plot
    dataType = data['Type']
    if dataType == 'CityModel':
        PlotCityModel(data, '--plot-labels' in sys.argv, '--plot-vertices' in sys.argv)
        pylab.show()
    elif dataType == 'HeightMap':
        PlotHeightMap(data, '--plot-contours' in sys.argv)
    elif dataType == 'Mesh2D':
        PlotMesh2D(data)
    else:
        print('Unknown data type: ' + str(dataType))
