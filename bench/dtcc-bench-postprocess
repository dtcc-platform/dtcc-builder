#!/usr/bin/env python
#
# Script for processing results from dtcc-bench-run

import json, glob, sys
import seaborn as sns
from pylab import *

# Set theme
sns.set_theme()
sns.set_style('ticks')
sns.set_context('paper')
markers = ['o', 'v', '^', '<', '>', 's', 'p', '+', 'x', 'D']

# Get directory
if not len(sys.argv) == 2:
    print('Usage: dtcc-bench-postprocess <directory>')
    exit(1)
benchDirectory = sys.argv[1]

# Get cases
cases = [f.split('.log')[0] for f in glob.glob(benchDirectory + '/*') if not '-skip' in f]

# Get parameters
parameters = [json.load(open('%s/Parameters.json' % c)) for c in cases]

# Get number of cells (by reading the log files)
cells = [float(open('%s/bench.log' % c).read().split('3D tetrahedral')[1].split()[5]) for c in cases]

# Set independent variable (this is a bit of a hack...)
if "NumRandomBuildings" in benchDirectory:
    x = [p['NumRandomBuildings'] for p in parameters]
    _xlabel = 'Number of buildings'
elif "MeshResolution" in benchDirectory:
    x = cells
    _xlabel = 'Number of cells'
else:
    print('Unknown case')
    exit(1)

# Sort cases by independent variable
x, cases = zip(*sorted(zip(x, cases)))

# Get variables (by looking at the first case)
variables = sorted([k for k in json.load(open('%s/Timings.json' % cases[0])).keys() if 'Step ' in k])

# Get timings
timings = {}
for variable in variables:
    timings[variable] = [json.load(open('%s/Timings.json' % c))[variable]['Mean'] for c in cases]

# Plot timings
figure(figsize=(8, 8))
for i, variable in enumerate(variables):

    # Calculate slope (using last portion of data)
    n = 4
    y = timings[variable]
    p = polyfit(log(x[-n:]), log(y[-n:]), 1)[0]

    # Plot
    lbl = '%s ($p = %.2f$)' % (variable, p) if abs(p) > 0.1 else variable
    loglog(x, y, '-o', label=lbl, marker=markers[2 + i])

# Adjust plot
xlabel(_xlabel)
ylabel('CPU time')
legend()
grid(True)

# Save plot
fileName = [f for f in benchDirectory.split('/') if len(f) > 0][-1] + '.pdf'
print('Saving plot to file %s' % fileName)
savefig(fileName)

show()
