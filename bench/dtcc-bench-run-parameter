#!/usr/bin/python
import json
import subprocess
import glob
#import psutil
import shutil
import os

def createCase(caseName,dataDir):
    print('Creating '+caseName)
    shutil.copytree(dataDir,caseName)
    return
def cleanupCase(caseName):
    print('Cleaning '+caseName)
    folder=caseName+"/"
    print(folder)
    files = glob.glob(folder+'*.la*')
    print(files)
# Iterate over the list of files and remove individually
    for file in files:
       os.remove(file)
    return

def checkIfProcessRunning(processName):
    '''
    Check if there is any running process that contains the given name processName.
    '''
    #Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if processName.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False;

parameter="MeshResolution"
folder="bench"
#data = {}
file = 'Majorna2021.json'
with open(file) as f:
  data = json.load(f)

#print(data)
if not parameter in data:
    print(parameter+" doesn't exist in "+file+", exiting!")
    quit()
pivots= [4.00, 5.66, 8.00, 11.31, 16.00, 22.63, 32.00, 45.25, 64.00, 90.51, 128.00]
print("Parameter found, running...")
cwd=os.getcwd();
for id in pivots:
    data[parameter]=id;
    data['DataDirectory']=cwd+'/'+folder+str(id)
    with open(parameter+str(id)+'.json', 'w') as outfile:
        json.dump(data, outfile)
    createCase(folder+str(id), '/home/dtcc/core/data/Majorna2021/')

    #Used for parallel spawnage
    #process = subprocess.Popen(['echo', 'More output'],
    #                 stdout=subprocess.PIPE, 
    #                 stderr=subprocess.PIPE)
    #stdout, stderr = process.communicate()
    #stdout, stderr
    string=parameter+str(id)+'.json'
    print("Spawning demo for "+parameter+": "+str(id))
    with open(parameter+str(id)+'.log', 'w') as f:
        process = subprocess.Popen(['../demo/demo-generate-mesh-arg',string], stdout=f, stderr=f)
        process.wait()
        cleanupCase(folder+str(id))
