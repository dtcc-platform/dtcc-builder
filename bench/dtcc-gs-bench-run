#!/usr/bin/env python3
#
# Script for running benchmarks for dtcc-generate-mesh.

import json, subprocess, glob, shutil, os, datetime, copy
from math import sqrt

# Parameters for mesh resolution study
parameterName = "MaxIter";
#"MaxIter": [0 10 100 1000];
#    "RelTol": 0.001,
#parameterValues = reversed([int(4*sqrt(2)**n) for n in range(11)])
parameterValues = [0, 10];
# parameterFile = '../data/cleanHelsRes2022/Parameters.json'
parameterFile = '../data/HelsingborgResidential2022/Parameters.json'
binaryGenerateCityModel = '../build/dtcc-generate-citymodel/dtcc-generate-citymodel'
binaryGenerateMesh = '../build/dtcc-generate-mesh/dtcc-generate-mesh'

# Parameters for randomized citymodel study
#parameterName = "NumRandomBuildings"
#parameterValues = [int(4*sqrt(2)**n) for n in range(23)]
#parameterFile = '../demo/Majorna2021.json'
#binaryGenerateCityModel = '../bin/dtcc-randomize-citymodel'
#binaryGenerateMesh = '../bin/dtcc-generate-mesh'

# Create directory for bench run
timestamp = str(datetime.datetime.now()).replace(' ', '-')
benchDirectory = 'bench-%s-%s' % (parameterName, timestamp)
print('Creating bench directory: %s' % benchDirectory)
os.mkdir(benchDirectory)

# Read parameters
with open(parameterFile) as f:
  parameters = json.load(f)

# Run test cases
for parameterValue in parameterValues:

    # Set case directories
    caseDirectory = benchDirectory + '/iter_' + str(parameterValue)
    caseParameterFile = caseDirectory + '/' + 'Parameters.json'
    caseLogFile = caseDirectory + '/' + 'bench.log'
    print('')
    print('Bench case: %s = %s' % (parameterName, parameterValue))
    print('---------------------------------------------------------------------')
    print('  Case directory:  %s' % caseDirectory)
    print('  Case parameters: %s' % caseParameterFile)
    print('  Case log file:   %s' % caseLogFile)

    # Copy data to case directory
    print('  Copying case data...')
    shutil.copytree(parameters['DataDirectory'], caseDirectory)

    # Write case parameters
    caseParameters = copy.deepcopy(parameters)
    caseParameters[parameterName] = parameterValue
    caseParameters['DataDirectory'] = caseDirectory
    caseParameters['GenerateSurfaceMeshes'] = False
    caseParameters['WriteJSON'] = True
    caseParameters['WriteVTK'] = True
    caseParameters['Debug'] = False
    with open(caseParameterFile, 'w') as f:
        json.dump(caseParameters, f)

    #Used for parallel spawnage
    #process = subprocess.Popen(['echo', 'More output'],
    #                 stdout=subprocess.PIPE,
    #                 stderr=subprocess.PIPE)
    #stdout, stderr = process.communicate()
    #stdout, stderr

    # Run case
    print('  Spawning case run...')
    with open(caseLogFile, 'w') as f:

        # Run citymodel generation (Timings.json from this stage will be overwritten)
        print('  Running %s' % binaryGenerateCityModel)
        process = subprocess.Popen([binaryGenerateCityModel, caseParameterFile], stdout=f, stderr=f)
        process.wait()

        # Run mesh generation
        print('  Running %s' % binaryGenerateMesh)
        process = subprocess.Popen([binaryGenerateMesh, caseParameterFile], stdout=f, stderr=f)
        process.wait()

        # Cleanup case directory
        print('  Cleaning up case directory...')
        keep = ['dtcc-generate-mesh-timings.json', 'bench.log', 'Parameters.json', 'Step35Mesh.vtu', 'Step33Mesh.vtu'];
        files = [f for f in glob.glob(caseDirectory + '/*') if not f.split('/')[-1] in keep]
        for f in files:
            print('  Removing %s' % f)
            os.remove(f)
